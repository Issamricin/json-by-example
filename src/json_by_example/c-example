'''
Not all Python datatype can be converted into JSON ; for example complex datatype 
we extends the class JSONEncoder . Encoding is a way to convert Python Object to JSON Object( string in this case); 
Decoder is opposite which is to convert JSON Object(String in our case) into Python Object (dictionary in case all types can be converted)
'''
import json


class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, complex):
            return[obj.real, obj.imag]
        
        # In case we don't have complex object; let the base c lass default method raise the TypeError
        return super().default(obj)


if __name__ == '__main__':
    x = json.dumps(2 +1J, cls= ComplexEncoder)
    print(x) # [2.0, 1.0]  we decided the return as a list of two element the first is real and the second is imaginary . 

